#!/bin/sh
set -euC

readonly FROM=$1
readonly FULL_REF=${2#refs/}
readonly HASH=$3

readonly TO=docs

case ${FULL_REF%%/*} in
    heads) kind=branch ;;
    tags)  kind=tag ;;
    *)
        printf 'I do not know what to do with ref `%s`.\n' "$REF"
        exit 7
esac

ref=${FULL_REF#*/}
target=$TO/$kind/$ref

## Add the new documentation as a sub-directory of the documentation. If this is
## a branch, write the commit hash to a specific file.

rm -rf "$target"
mkdir -p "$target"
mv "$FROM"/* "$target"

if [ "$kind" = branch ]; then
    echo "$HASH" | head -c 7 > "$target"/commit-hash
fi

## Replace the index of the newly-added documentation by a redirection to the
## global index.

rm -f "$target"/index.html
cat <<EOF > "$target"/index.html
<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="refresh" content="0; url='../..'" />
  </head>
  <body>
    <p>Please follow <a href="../..">this link</a>.</p>
  </body>
</html>
EOF

## Regenerate the global index page to take into account the newly-added
## documentation.

"$TO"/index.html
{
    cat <<EOF
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>Documentation</title>
        <meta charset="utf-8"/>
        <meta name="viewport" content="width=device-width,initial-scale=1.0"/>

        <style type="text/css">
         body {
             font-family: "Fira Sans", Helvetica, Arial, sans-serif;
             text-align: left;
             color: #333;
             background: #FFFFFF;
         }

         .content {
             max-width: 90ex;
             margin: auto;
         }

         ul {
             list-style-type: none;
             padding-left: 10px;
         }

         span.version {
             font-family: "Fira Mono", courier;
             color: gray;
         }
         .version:before { content: "["; }
         .version:after  { content: "]"; }

         a { color: #960010; }
         a:hover { color: #FF0000; }
        </style>
    </head>
    <body>
        <main class="content">
            <div class="by-name">
                <h2>Documentation</h2>
                <h3>Tags</h3>
                <ul>
EOF

    ls -1 "$TO"/tag | sort -R | \
        while read -r ref; do
            for lib in "$TO/tag/$ref"/*; do
                if [ -d "$lib" ]; then
                    lib=$(basename "$lib")
                    printf '<li><span class="version">%s</span> <a href="%s">%s</a></li>' "$ref" "tag/$ref/$lib/index.html" "$lib"
                fi
            done
        done

    cat <<EOF
      </ul>
      <h3>Branches</h3>
      <ul>
EOF

    ls -1 "$TO"/branch | sort -R | \
        while read -r ref; do
            for lib in "$TO/branch/$ref"/*; do
                if [ -d "$lib" ]; then
                    lib=$(basename "$lib")
                    printf '<li><span class="version">%s@%s</span> <a href="%s">%s</a></li>' "$ref" "$(cat "$TO/branch/$ref/commit-hash")" "branch/$ref/$lib/index.html" "$lib"
                fi
            done
        done

    cat <<EOF
      </ul>
      </div>
    </main>
  </body>
</html>
EOF
} > "$TO"/index.html

## Stage all the newly-added files.

git add "$target"
git add "$TO"/index.html
